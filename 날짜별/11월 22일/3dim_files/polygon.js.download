let formSubmitting = false;
const aceEditorsDefaultValue = {};

const confirmExitIfModified = (function () {
    function formIsDirty(form) {
        for (let i = 0; i < form.elements.length; i++) {
            const element = form.elements[i];
            if ($(element).hasClass("ignoreConfirmExitIfModified")
                || $(element).hasClass("ace_search_field")
                || $(element).hasClass("custom-test-textarea")) {
                continue;
            }

            const type = element.type;
            if (type === "file" && element.value !== null && element.value.toString().length > 0) {
                return true;
            }
            if (type === "checkbox" || type === "radio") {
                if (element.checked !== element.defaultChecked) {
                    return true;
                }
            } else if (type === "hidden" || type === "password" || type === "text" ||
                type === "textarea") {
                if (element.value !== element.defaultValue && !$(element).hasClass("ace_text-input")) {
                    return true;
                }
            } else if (type === "select-one" || type === "select-multiple") {
                let j;
                let hasSelected = false;

                for (j = 0; j < element.options.length; j++)
                    if (element.options[j].defaultSelected) {
                        hasSelected = true;
                    }

                for (j = 0; j < element.options.length; j++) {
                    if (element.options[j].selected !== element.options[j].defaultSelected) {
                        if (element.options[j].selected && !hasSelected && j === 0)
                            continue;

                        return true;
                    }
                }
            }
        }

        if (typeof (ace) !== "undefined") {
            for (const aceId in aceEditorsDefaultValue) {
                if (aceEditorsDefaultValue.hasOwnProperty(aceId)
                    && ace.edit(aceId).getValue() !== aceEditorsDefaultValue[aceId]) {
                    return true;
                }
            }
        }

        return false;
    }

    return function (message) {
        window.onbeforeunload = function (e) {
            let dirtyForms = new Set();
            e = e || window.event;
            for (let i = 0; i < document.forms.length; ++i) {
                if (formIsDirty(document.forms[i]) && !formSubmitting) {
                    dirtyForms.add(document.forms[i]);
                }
            }
            if (dirtyForms.size > 0) {
                if (e) {
                    e.returnValue = message;
                    e.data = dirtyForms;
                }
                return message;
            }
        };
    };
})();

function safeFormsLeave() {
    $("form").submit(function () {
        formSubmitting = true;
    });

    if (typeof (ace) !== "undefined") {
        const savedElements = $("form .savedFile");
        if (savedElements.length > 0) {
            savedElements.each(function () {
                const id = $(this).attr("id");
                aceEditorsDefaultValue[id] = ace.edit(id).getValue();
            });
        } else {
            $("form .aceSupportsSafeFormsLeave").each(function () {
                const id = $(this).attr("id");
                aceEditorsDefaultValue[id] = ace.edit(id).getValue();
            });
        }
    }

    confirmExitIfModified("Warning! You may lose your unsaved changes. Are you sure you want to leave the page?");
}

function isMobileBrowser() {
    let check = false;
    (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
}

function extractionNumericText(node) {
    let s = $(node).text().trim();
    if (/^([0-9]+)$/.test(s)) {
        while (s.length < 18) {
            s = '0' + s;
        }
    }
    return s;
}

function addLoginsAutocomplete($element, suggestLink, suggestUserGroups) {
    if ($element.prop("tagName") === "TEXTAREA") {
        let wasMinus = false;
        $element.textcomplete([{
            match: /(^|\b|)([^\s]{3,})$/,

            search: function (term, callback) {
                term = term.toLowerCase();

                if (term.startsWith("-")) {
                    term = term.substr(1);
                    wasMinus = true;
                } else {
                    wasMinus = false;
                }

                $.post(suggestLink, {q: term, suggestUserGroups}, function (data) {
                    let views = data.split(/\s*\n+\s*/);
                    views = views.filter(function (view) {
                        return !/^\s*$/.test(view);
                    }).map(function (view) {
                        const loginAndName = view.split("|");
                        return loginAndName[0] + " [" + loginAndName[1] + "]";
                    });
                    callback(views);
                }, "text");
            },

            replace: function (word) {
                if (wasMinus) {
                    word = "-" + word;
                    wasMinus = false;
                }
                return word.replace(/\s*\[.*]\s*$/, "");
            }
        }], {
            zIndex: "10000",
            debounce: 500
        });
    } else {
        $element.autocomplete(suggestLink + "&suggestUserGroups=" + suggestUserGroups, {
            delay: 300,
            width: 200,
            selectFirst: false,
            matchContains: true,
            minChars: 3,
            formatItem: function (data1) {
                return data1[0] + " [" + data1[1] + "]";
            }
        });
    }
}

function supportShiftKeyMultiselect($checkboxes) {
    let lastClicked = null;
    $checkboxes.click(function (e) {
        if (lastClicked && e.shiftKey) {
            const $localCheckboxes = $($checkboxes.selector);
            const start = $localCheckboxes.index(this);
            const end = $localCheckboxes.index(lastClicked);
            $localCheckboxes.slice(Math.min(start, end), Math.max(start, end) + 1)
                .filter(":not(:disabled)")
                .prop("checked", lastClicked.checked)
                .change();
        } else {
            lastClicked = this;
        }
    });
}

function updateCheckboxRowColorFunc() {
    const tr = $(this).closest("tr");
    if (this.checked) {
        tr.addClass("checked");
    } else {
        tr.removeClass("checked");
    }
}

function supportCopyingToClipboard($url, text, message) {
    function copyToClipboard(text) {
        if (window.clipboardData && window.clipboardData.setData) {
            return window.clipboardData.setData("Text", text);
        } else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
            const textarea = document.createElement("textarea");
            textarea.textContent = text;
            textarea.style.position = "fixed";  // Prevent scrolling to bottom of page in Microsoft Edge.
            document.body.appendChild(textarea);
            textarea.select();
            try {
                return document.execCommand("copy");  // Security exception may be thrown by some browsers.
            } catch (e) {
                console.warn("Copy to clipboard failed.", e);
                return false;
            } finally {
                document.body.removeChild(textarea);
            }
        }
    }

    $url.click(function () {
        if (copyToClipboard(text) !== false) {
            $url.css("color", "blue");
            setTimeout(() => {
                $url.css("color", "");
            }, 400);
            showMessage(message);
        }
    });
}

// requires jGrowl

function filterClipboardText(text) {
    let result = "";
    for (let i = 0; i < text.length; i++) {
        let cur = text.charAt(i).charCodeAt(0);
        if (cur === 160 && i > 0 && i + 1 < text.length) {
            let prev = text.charAt(i - 1).charCodeAt(0);
            let next = text.charAt(i + 1).charCodeAt(0);
            if ((prev === 10 || prev === 13) && (next === 10 || next === 13)) {
                continue;
            }
        }
        result += text.charAt(i);
    }
    return result;
}

function showMessage(message) {
    $.jGrowl(message, {
        position: 'bottom-right',
        life: 15000,
        theme: "polygon"
    });
}

function setupCopyButton() {
    $(".sample-test .title").each(function () {
        let preId = ("id" + Math.random()).replaceAll(".", "0");
        let cpyId = ("id" + Math.random()).replaceAll(".", "0");

        $(this).parent().find("pre").attr("id", preId);
        let $copy = $("<i title='Copy' data-clipboard-target='#" + preId + "' id='" + cpyId + "' class='input-output-copier fa fa-copy'></i>");
        $(this).append($copy);

        // noinspection JSCheckFunctionSignatures
        let clipboard = new Clipboard('#' + cpyId, {
            text: function (/*trigger*/) {
                return filterClipboardText(document.querySelector('#' + preId).innerText);
            }
        });

        let isInput = $(this).parent().hasClass("input");

        clipboard.on('success', function (e) {
            $copy.css("color", "blue");
            setTimeout(() => {
                $copy.css("color", "");
            }, 400);
            if (isInput) {
                showMessage("The example input has been copied into the clipboard");
            } else {
                showMessage("The example output has been copied into the clipboard");
            }
            e.clearSelection();
        });
    });
}

function escapeHtml(s) {
    return s
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function supportAceEditorDrafts(aceEditor, draftsId, draftsUrl) {
    const $editor = $(aceEditor.container);
    const $back = $("<textarea/>").css({
        "position": "absolute",
        "z-index": -100,
        "padding": 0,
        "border": 0,
        "resize": "none",
        "color": "transparent",
    }).attr({
        "readonly": true,
        "tabindex": -1,
        "data-drafts-id": draftsId,
    }).insertBefore($editor).drafts({"url": draftsUrl}).hide();

    aceEditor.renderer.on("autosize", function () {
        $back.css({
            "width": $editor.width(),
            "overflow-y": aceEditor.renderer.scrollBar.isVisible ? "scroll" : "hidden",
        }).show();
    });
    aceEditor.session.on("change", function () {
        $back.val(aceEditor.getValue());
    });
    $back.on("change keyup paste", function () {
        aceEditor.setValue($(this).val());
        aceEditor.clearSelection();
    });
}

function processEnableErrorAutofocus() {
    let found = false;

    $(".enable-error-autofocus .field-error").each(function () {
        if (!found) {
            const val = $.trim($(this).text());
            if (val.length > 0) {
                let classes = this.className.split(" ");
                for (let i in classes) {
                    if (classes[i].match(/for__.*/)) {
                        const name = classes[i].substring("for__".length);
                        $(".enable-error-autofocus input[name=" + name + "]").focus();
                        $(".enable-error-autofocus select[name=" + name + "]").focus();
                        $(".enable-error-autofocus textarea[name=" + name + "]").focus();
                        found = true;
                    }
                }
            }
        }
    });

    return found;
}

function processEnableAutofocus(shouldBeEmpty) {
    let focusedField = null;

    $(".enable-autofocus input, .enable-autofocus select, .enable-autofocus textarea").each(function () {
        const elem = $(this);
        if (focusedField === null
            && elem.attr("type") !== "hidden"
            && elem.attr("type") !== "checkbox"
            && !elem.hasClass("skip-autofocus")
            && $(elem).is(':visible')) {
            if (shouldBeEmpty && (elem.val() === null || elem.val() === "")) {
                focusedField = elem;
            } else if (!shouldBeEmpty) {
                focusedField = elem;
            }
        }
    });

    if (focusedField !== null) {
        focusedField.focus();
    }
}

function runAutofocus() {
    const found = processEnableErrorAutofocus();
    if (!found) {
        processEnableAutofocus(false);
    }
}

function getValidationErrors(json) {
    const errors = [];
    for (const key in json) {
        if (json.hasOwnProperty(key) && key.startsWith("error__")) {
            errors.push(json[key]);
        }
    }
    if (errors.length === 0) {
        return "Unknown error";
    } else if (errors.length === 1) {
        return "Error: " + errors[0];
    } else {
        return "Errors:\n" + errors.join("\n");
    }
}

function reloadPartiallyAsync(callback) {
    $.ajax({
        url: document.location.href,
        type: "GET",
        success: function (response) {
            const $body =
                $(response.substring(response.indexOf("<body"), response.lastIndexOf("</body>") + "</body>".length));
            $body.find("script").remove();
            $body.find(".reloadable").each((index, elem) => {
                $("." + elem.classList.value.trim().replace(/\s+/g, "."))
                    .html(elem.innerHTML);
            });
            addSessionToHrefs();
            if (callback) {
                callback();
            }
        }
    });
}

function addSessionToHrefs() {
    const sessionText = $("#session").text();

    if (sessionText && sessionText.length > 0) {
        $("a").each(function () {
            if ($(this).hasClass("outbound-link")) {
                return;
            }

            let href = $(this).attr("href");

            if (href.startsWith("/") || href.startsWith("${applicationUrl}") || href.indexOf(":") < 0) {
                if (href.indexOf("session=") < 0 && href.indexOf("#") < 0 && !$(this).hasClass('noSessionLink')) {
                    if (href.indexOf("?") < 0) {
                        href += "?session=" + sessionText;
                    } else {
                        href += "&session=" + sessionText;
                    }
                }

                $(this).attr("href", href);
            }
        });

        $("form").submit(function () {
            $(this).append("<input type=\"hidden\" name=\"session\" value=\"" + sessionText + "\"/>");
        });
    }
}